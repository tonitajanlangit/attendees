# -*- coding: utf-8 -*-
"""Attendees Final.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AX8qclKAfVgghe-JHCy0fy6cf9sO9keY
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
sns.set_style('whitegrid')
import warnings
warnings.filterwarnings('ignore')


file_path = 'full-attendee-dataset.csv'
df = pd.read_csv(file_path)

df.head()

df.tail()

df.info()

df.shape

#total of 301 entries with 9 columns

#list column names
df.columns

df.describe()

#check for missing values
df.isnull().sum()

#check for duplicates
df[df.duplicated(keep='first')]

# replace missing values in the "Is it ok to share your contact for networking? This is a networking event after all :)" column with yes
# replace missing values in  the "What will you help you best with your AI project or startup ideas? (Helps us plan better programming for you!)" column with no response
# replace missing values in  the "Are you interested in contributing to the GenAI collective community?" column with no response
# replace missing values in  the "Which of the following best describes your background?" column with unknown
# replace missing values in  the "custom source" column with direct
# replace missing values in  the "Pls specify area of interest (if selected other)" column with no response


df['Is it ok to share your contact for networking? This is a networking event after all :)'] = df['Is it ok to share your contact for networking? This is a networking event after all :)'].fillna('Yes')
df['What will you help you best with your AI project or startup ideas? (Helps us plan better programming for you!)'] = df['What will you help you best with your AI project or startup ideas? (Helps us plan better programming for you!)'].fillna('No response')
df['Are you interested in contributing to the GenAI collective community?'] = df['Are you interested in contributing to the GenAI collective community?'].fillna('No response')
df['Which of the following best describes your background? '] = df['Which of the following best describes your background? '].fillna('Unknown')
df['custom_source'] = df['custom_source'].fillna('Direct')
df['Pls specify area of interest (if selected other)'] = df['Pls specify area of interest (if selected other)'].fillna('No response')

# verify all missing data have been filled

# Check for missing values after imputation
print(df.isnull().sum())

#Alternatively, a more concise way to verify:
if df.isnull().sum().sum() == 0:
  print("All missing data has been filled.")
else:
  print("There are still missing values in the DataFrame.")

# display rows that had data filled

# Display rows with non-missing values for all columns
df.dropna()

# Or, to display rows with at least one non-missing value:
df.dropna(how='all')

# @title Approval Status

df.groupby('approval_status').size().plot(kind='barh', color=sns.palettes.mpl_palette('Dark2'))
plt.gca().spines[['top', 'right',]].set_visible(False)
plt.title('Attendees Approval Status')
plt.xlabel('Number of Attendees')
plt.ylabel('Approval Status')


approval_counts = df.groupby('approval_status').size()
approval_counts

"""The event has 301 attendees, with 247 approved, 33 pending approval, 14 declined, and 7 on the waitlist. The high number of approved attendees indicates smooth processing, while the small pending and waitlisted numbers suggest minimal uncertainty in final attendance."""

# @title Background of Attendees

import matplotlib.pyplot as plt
from collections import Counter

# Combine all keywords into a single list
all_keywords = []
for index, row in df.iterrows():
    keywords = str(row['Which of the following best describes your background? ']).split(',')
    for keyword in keywords:
        all_keywords.append(keyword.strip().lower()) # Convert to lowercase for case-insensitive counting

# Count keyword occurrences
keyword_counts = Counter(all_keywords)

# Create a list of keywords and their counts, sorted by count
sorted_keyword_counts = sorted(keyword_counts.items(), key=lambda x: x[1], reverse=True)

# Print the list of keywords and counts
for keyword, count in sorted_keyword_counts:
    print(f'{keyword}: {count}')

# Create a pie chart
keywords = [item[0] for item in sorted_keyword_counts]
counts = [item[1] for item in sorted_keyword_counts]

plt.figure(figsize=(10, 10))
plt.pie(counts, labels=keywords, autopct='%1.1f%%', startangle=90)
plt.title('Background of Attendees')
plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.
plt.show()

"""Founders make up the largest group, indicating a strong presence of entrepreneurs and startup enthusiasts. Engineers form the second-largest group, showing a technical and development-focused audience. Students represent a significant portion, suggesting an interest from emerging talent and future professionals. Researchers also make up a notable group, highlighting an interest in academic and innovation-driven discussions. This indicates a mix of entrepreneurial, technical, and academic interests. Operators, investors, executives, and media make up smaller portions, suggesting limited engagement from business leaders and funding sources. The event appears well-suited for collaboration between startups, tech professionals, and researchers, but could benefit from increased participation from investors, executives, and media to enhance funding opportunities and exposure. To maximize impact, targeted networking, investor panels, and media outreach could help create a more balanced and influential ecosystem.

"""

# @title Contact Sharing Preferences

# Combine 'Yes' responses in 'Is it ok to share your contact for networking?'
df['Is it ok to share your contact for networking? This is a networking event after all :)'] = df['Is it ok to share your contact for networking? This is a networking event after all :)'].replace(['Yes', 'yes'], 'Yes')


yes_count = df[df['Is it ok to share your contact for networking? This is a networking event after all :)'].str.lower() == 'yes']['Is it ok to share your contact for networking? This is a networking event after all :)'].count()
no_count = df[df['Is it ok to share your contact for networking? This is a networking event after all :)'].str.lower() == 'no']['Is it ok to share your contact for networking? This is a networking event after all :)'].count()

print(f"Number of 'Yes' responses: {yes_count}")
print(f"Number of 'No' responses: {no_count}")


# Create the visualization
plt.figure(figsize=(8, 6))
sns.countplot(x='Is it ok to share your contact for networking? This is a networking event after all :)', data=df)
plt.title('Contact Sharing Preferences')
plt.xlabel('Willing to Share Contact')
plt.ylabel('Number of Attendees')
plt.show()

"""Out of 301 attendees, only 18 declined to share their contact information, while the rest either explicitly agreed or were assumed to be open to networking. This indicates a strong preference for collaboration and connection among participants. With such high engagement, initiatives like networking events, mentorship programs, or online communities could be valuable. For those who opted out, providing privacy-friendly options like selective visibility or anonymous Q&A can ensure inclusivity. Overall, the event fosters a highly connected and engaged community."""

# @title Top AI Interests

# Combine all keywords into a single list
all_keywords = []
for index, row in df.iterrows():
    keywords = str(row['Which part of AI interests you most?']).lower().split(',')  # Convert to lowercase
    for keyword in keywords:
        keywords_cleaned = ''.join(filter(str.isalnum, keyword)).strip() # Remove special chars
        if keywords_cleaned: # Add only if not empty
          all_keywords.append(keywords_cleaned)

# Count keyword occurrences
keyword_counts = Counter(all_keywords)

# Create a list of keywords and their counts, sorted by count
sorted_keyword_counts = sorted(keyword_counts.items(), key=lambda x: x[1], reverse=True)


# Print the list of keywords and counts
for keyword, count in sorted_keyword_counts:
    print(f'{keyword}: {count}')

# Create a bar plot of the top N keywords
import matplotlib.pyplot as plt
import seaborn as sns
N = 10  # Number of top keywords to display
top_keywords = sorted_keyword_counts[:N]
keywords = [item[0] for item in top_keywords]
counts = [item[1] for item in top_keywords]

plt.figure(figsize=(12, 6))
sns.barplot(x=keywords, y=counts)
plt.xticks(rotation=45, ha='right')
plt.xlabel('Category')
plt.ylabel('Frequency')
plt.title(f'Top AI interests')
plt.tight_layout()
plt.show()

"""The most popular AI interests are in Startups (164 responses), Business (142), and Healthcare (85), highlighting strong enthusiasm for AI in entrepreneurship, business applications, and healthcare advancements. Research (70) and Education (66) also attract significant attention, while areas like Design, Ethics, and Cybersecurity have moderate interest. Niche topics like AI Business Applications, AI Research, and AI Design/UX/HCI each received just one response, indicating specialized or emerging areas with less widespread attention."""

# @title Background of Attendees and their AI Interests

# prompt: visualize comparison of column "Which of the following best describes your background?" and "Which part of AI interests you most?". separate keywords by comma and visualize as a heatmap

import pandas as pd
import matplotlib.pyplot as plt
# Create a cross-tabulation of the two columns
cross_tab = pd.crosstab(df['Which of the following best describes your background? '], df['Which part of AI interests you most?'])

# Preprocess the data for the heatmap
# Separate keywords by comma and create a list
def preprocess_keywords(text):
    if isinstance(text, str):
        return [keyword.strip().lower() for keyword in text.split(',')]
    return []

# Apply the function to both columns
df['Background Keywords'] = df['Which of the following best describes your background? '].apply(preprocess_keywords)
df['Interest Keywords'] = df['Which part of AI interests you most?'].apply(preprocess_keywords)


# Explode the lists to create separate rows for each keyword
df_exploded = df.explode('Background Keywords').explode('Interest Keywords')


# Create a cross-tabulation of the exploded data
cross_tab = pd.crosstab(df_exploded['Background Keywords'], df_exploded['Interest Keywords'])

# Create the heatmap
plt.figure(figsize=(12, 8))
sns.heatmap(cross_tab, annot=True, cmap='viridis', fmt='d')
plt.title('Comparison of Background and AI Interests')
plt.xlabel('AI Interests')
plt.ylabel('Background')
plt.xticks(rotation=45, ha='right')
plt.yticks(rotation=0)
plt.show()

"""The heatmap reveals how attendee backgrounds align with AI interests. Founders show the highest interest in startups, while engineers focus on AI research. Students are inclined towards research and healthcare applications, reflecting their academic pursuits. Researchers also display strong interest in healthcare. General attendees show moderate interest across various fields, especially business applications. The visualization highlights the diverse ways different professional backgrounds engage with AI topics."""

# @title Best Support for AI Projects or Startup: Top Suggestions
from wordcloud import WordCloud, STOPWORDS
import matplotlib.pyplot as plt

# Assuming 'df' is your DataFrame and the column name is as provided
text = ' '.join(df[df['What will you help you best with your AI project or startup ideas? (Helps us plan better programming for you!)'] != 'No response']['What will you help you best with your AI project or startup ideas? (Helps us plan better programming for you!)'].astype(str))

# Create a WordCloud object
wordcloud = WordCloud(width=800, height=400, background_color='white', stopwords=STOPWORDS).generate(text)

# Display the generated image:
plt.figure(figsize=(10, 5), facecolor=None)
plt.imshow(wordcloud)
plt.axis("off")
plt.tight_layout(pad=0)
plt.show()

"""The word cloud highlights key themes and support areas that attendees believe would help their AI projects or startups. The most prominent words are "Networking," "AI," "People," "Opportunities," "Collaboration," "Mentorship," "Tools," and "Learning". These suggest that attendees value connections, knowledge-sharing, and access to resources.

Other notable terms like "workshop," "communication," "business," "latest," and "deep" indicate a need for practical learning experiences, insights into emerging trends, and community engagement. The emphasis on "product," "projects," and "technology" further reinforces a focus on building and scaling AI-driven solutions.

Overall, the word cloud suggests that attendees seek a mix of professional networking, mentorship, hands-on workshops, and access to the latest AI tools and trends to support their AI journeys.


"""

# prompt: visualize custom_source column, do not include 'direct', print count for custom source

import matplotlib.pyplot as plt
# Custom source visualization excluding 'direct'
custom_source_counts = df['custom_source'].value_counts()
print(custom_source_counts)

plt.figure(figsize=(10, 6))
sns.countplot(data=df[df['custom_source'] != 'Direct'], x='custom_source')
plt.title('Custom Source Distribution (excluding "Direct")')
plt.xlabel('Custom Source')
plt.ylabel('Count')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

"""The majority of attendees (240) signed up directly, showing strong organic interest or existing awareness of the event. Among referral sources, PopIn (21 total) had the highest impact, followed by Substack (14) and Plink (8). Other sources like Vector (7), UTGSU (5), TechTO (4), PSOC (1), and TKS (1) contributed smaller numbers. This indicates that while direct sign-ups dominated, certain referral channels played a role in attracting additional attendees."""
